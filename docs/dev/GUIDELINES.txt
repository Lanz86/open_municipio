.. -*- mode: rst -*-
 
=========================
Guidelines for developers
=========================

Generalities
============

This document lists guidelines to be followed by developers contributing to
**OpenMunicipio**.

Please adhere to these coding standards when writing code intended to be included within
**OpenMunicipio**'s codebase.

Unless otherwise stated, you MUST follow `PEP 8`_ (aka *Style Guide for Python
Code*) and `Django Coding Style`_ guidelines.  

In case of conflicts, assume this order of precedence:

* this document
* `Django Coding Style`_ guidelines
* `PEP 8`_ 


.. _`PEP8`: https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/
.. _`Django Coding Style`: https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/


Language
--------

#. Source code MUST be written in English
#. Source code's comments MUST be written in English, too
#. Developer documentation MUST be written in English
#. User documentation MUST be written in Italian
#. Commit messages MUST be written in English
#. QUESTION: tickets ??


Indentation
-----------

#. Source code MUST be indented by 4 spaces (NO tabs, please !). 

  * for `vim` users, these options should do the trick:

    .. sourcecode:: vim

    set expandtab
    set tabstop=4
    set shiftwidth=4
    
Comments
--------

#. Within source code, docstrings, comments, etc. SHOULD be formatted following
 ``docutils`` conventions (i.e. using the `reStructuredText`_ markup syntax


.._ `reStructuredText`: http://docutils.sourceforge.net/rst.html


Python module's import order
----------------------------

Python modules should be imported at the top of source files for readability
reasons (non-module-level imports (if needed) are an exception, of course!).

Module-level imports SHOULD follow this order:

#. modules included with the official Django distribution
#. modules provided by 3-rd party Django apps
#. system libraries
#. project-specific modules

Settings
--------

#. Values of Django settings MUST be accessed via the proxy object
  ``django.conf.settings``, NOT importing the ``settings.py`` module.

  That is to say, in order to access e.g. ``STATIC_ROOT`` use:
  
  .. code-block:: python

     from django.conf import settings
     value = settings.STATIC_ROOT

  DON'T use:
  
    .. code-block:: python

    import mysite.settings
    value = settings.STATIC_ROOT


Naming conventions
------------------
#. class names MUST be CamelCase
#. names made by multiple words (except classes) MUST be separated by ``_`` (underscore)
#. variables and attributes referencing multiple entities MUST be pluralized (except ``ManyToManyField``s, see below)


Stubs
-----

#. When stubbing callable objects (functions, methods) you should use ``raise
 NotImplementedError`` instead of just a ``pass`` statement, as a remainder for
 you and other developers;

Managed attributes
------------------

#. To retrieve a computed attribute in class, try to use Python *properties* when
 possible, instead of *methods*, since this style provides for improved readability

Models
------
#. Names for ``BooleanField`` and ``NullBooleanField`` model fields SHOULD begin
 with a verb: e.g. ``is_active``, ``can_do_something``, etc.
#. Model validation and model save steps SHOULD be kept distinct;
 e.g. validation-specific logic goes within the ``Model.clean()`` method, while
 save-time logic goes within ``Model.save()``.  Since ``Model.clean()`` doesn't
 get automatically called, usually ``Model.save()`` will call it;

Fields
------
#. When a ``related_name`` attribute of a ``ForeignKey`` or ``ManyToManyField``
 model field is specified, it SHOULD end with ``_set``, for consistency with
 Django default behaviour;

#. Since ``ManyToManyField`` model fields behave as ``Manager`` objects, like
   ``related_name`` model attributes automatically added by Django to describe
   reverse relationships between models, for usage consistency their names SHOULD
   end ``_set``;

#. For each ``ManyToManyField`` or  ``related_name`` attribute, add a property
   providing direct access to the full QuerySet of corresponding model
   instances.  Example:

.. sourcecode:: python

   class Author(models.Model):
         ...
         
         @property
         def books(self):
             return self.book_set.all()
   
   class Book(models.Model):
         author_set = ManyToManyField(Author, related_name='book_set')
         ...

         @property
         def authors(self):
             return self.author_set.all()
            

Markers
-------

#. Within source code, you SHOULD use convential (uppercased) keywords to denote
 specific kind of comments:
 
    #. ``TODO`` denotes features to implement, improvements to made, etc.
    #. ``FIXME`` denotes issues with the code to be solved later
    #. ``WRITEME`` SHOULD be used as a (temporary!) replacement for docstrings, etc.
 



# -*- coding: utf-8 -*-
from django.db import models
from django.template.loader import get_template
from django.utils.translation import ugettext_lazy as _
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic
from model_utils import Choices
from model_utils.fields import StatusField
from model_utils.models import TimeStampedModel

#
# Newscache
#
class News(TimeStampedModel):
    """
    Stores news generated by different events

    An example:

    gen = Transition.objects.get(pk=1)
    rel = Deliberation.objects.get(pk=3)
    n = News(generating_object=gen, related_object=rel)
    n.save()

    """
    NEWS_TYPE = Choices(
        ('INST', 'institutional', _('institutional')),
        ('COMM', 'community', _('community'))
    )

    news_type = models.CharField(choices=NEWS_TYPE, default=NEWS_TYPE.institutional, max_length=4)

    priority = models.PositiveSmallIntegerField(verbose_name=_('priority'), default=3)

    # generating object generic relation
    generating_content_type   = models.ForeignKey(ContentType,
                                                  verbose_name=_('generating content type'),
                                                  related_name="generating_content_type_set_for_%(class)s")
    generating_object_pk      = models.PositiveIntegerField(_('object ID'))
    generating_object         = generic.GenericForeignKey(ct_field="generating_content_type",
                                                          fk_field="generating_object_pk")

    # related object generic relation
    related_content_type      = models.ForeignKey(ContentType,
                                                  verbose_name=_('related content type'),
                                                  related_name="related_content_type_set_for_%(class)s")
    related_object_pk         = models.PositiveIntegerField(_('object ID'))
    related_object            = generic.GenericForeignKey(ct_field="related_content_type",
                                                          fk_field="related_object_pk")

    text                      = models.TextField(verbose_name=_('text'), max_length=512)


    def __unicode__(self):
        return u'%s - %s - %s' % (self.id, self.created.strftime('%d/%m/%Y - %H:%I'), self.text)

    @classmethod
    def get_text_for_news(cls, context, template_file):
        """
        generic class-method that dispatches text generation for the news,
        to the proper template, given the context

        renders a template file, using a context and returns it
        used by signal handlers, to generate textual representation of the news
        """
        template = get_template(template_file)
        return template.render(context)


    class Meta:
        verbose_name = _('cached news')
        verbose_name_plural = _('cached news')

class NewsTargetMixin(models.Model):
    """
    add this mixin to allow retrieval of news related to the class

    for example, in acts/models.py::

        class Act(TimeStampedModel, NewsTargetMixin):

    then, if d is a Deliberation::

        d.related_news

    is a manager, that allows you to extract the news related to the Deliberation
    """
    # manager to handle the list of news that have the act as related object
    related_news = generic.GenericRelation(News,
                                           content_type_field='related_content_type',
                                           object_id_field='related_object_pk')
    class Meta:
        abstract = True